/*
    - O display flex diz que elementos dentro de um espaço podem
      ser remanejados.

    - O cabeçalho se tornou o que nós chamamos de flex container, 
      e com o flex container, por padrão, todos os elementos dentro
      dele vão ficar alinhados horizontalmente, um do lado do outro.
    
    - Através do flex container temos acesso a duas propriedades:

        * justify-content: Eixo horizontal. Pega todo espaçamento que 
                           tem lateral e redistribui entre os elementos do 
                           flex container

        * align-items: Eixo vertical do flex container

    - O justify-content tem diversos valores, estes que são:
    * flex-start: todos os elementos devem estar no início do flex container
    * flex-end: é no final do flex container
    * center: pega todo espaço da direita e redistribuir igualmente para
              todos os elementos no meio do flex container
    * space-around: deixa um espaçamento igual em cada um dos elementos, porém,
                    ele soma com o espaço entre elementos, podendo ficar 
                    desigual.
    * space-evenly: pega e redistribui igualmente o espaçamento entre os 
                    elementos, então o espaçamento sempre vai ser igual entre eles.
    * space-between: pega todo espaço vazio da direita e colocar os elementos
                     centrais do flex container, deixando as pontas coladas no 
                     flex container.

    - o align-itens possui diversos valores, estes:

    * flex-start: todos elementos ficam no topo do flex container
    * flex-end: deixa todos os elementos para baixo do flex container
    * center: alinha todos no meio do flex-container
    * stretch: faz todos os elementos ocuparem a mesma altura do flex
               container, a altura máxima do flex container.
    * Detalhe importante sobre o center e o stretch. o center ocupa
    apenas o espaço necessário, enquanto o stretch ocupa todo o espaço

   - a propriedade flex-wrap: 

   * O flex-wrap: nowrap; que é o valor padrão da propriedade,
     ele não vai quebrar linha caso não tenha mais espaço

   * O flex-wrap: wrap; faz a quebra de linha, e caso não há mais espaço lateral
     ele pula a linha
    
   * O flex-direction diz para o flex container, qual direção vai seguir.

   * o flex-direction tem seus principais valores, sendo:
     - flex-direction: column; onde cada elemento vai ficar um embaixo do outro
    * dica importante sobre o column: por se tratar de uma coluna, os valores
    de justify-content e align-itens são invertidos, sendo assim, Y e X respectivamente.

    * Quando nós criamos nosso flex container, vamos lembrar que cada um dos elementos
      ficou dentro de caixas, e essas caixas são o que nós chamamos de flex items. E cada
      um desses flex items também têm acesso a propriedades como, por exemplo, 
      justify-self e align-self. É apenas aplicado para um item                                                                                                   
     
    viewport e suas medidas:
    - vh se trata da altura da viewport
    - vw se trata da largura da viewport

    -Sabendo de tudo que foi aplicado até o momento, é necessário entender que 
    o display:flex; possui apenas o X e o Y, sendo assim foi criada a propriedade
    display: grid.

    O display grid, tem a mesma pergunta do display flex, "Onde aplicaremos essa
    propriedade?". E os conceitos de flex podem ser reaplicados no grid, sendo
    assim teremos o grid container
    
    propriedades como justify-content e align-items també são presentes dentro
    do grid, e nós podemos usa-las para remanejar um pouco os elementos. com apenas
    uma leve mudança em uma das propriedades

    com o grid, temos acesso a duas propriedades:

    * grid-template-columns: propriedade usada no grid container. ele diz
    ao grid container quantas colunas nós queremos e qual o tamanho dessas colunas

    se quisermos duas colunas de 100px: grid-template-columns: 100px 100px.
    ao olharmos os elementos, cada coluna vai ter 100px de largura

    com o display grid temos acesso também as frações ou fr. se queremos
    por exemplo, três colunas do mesmo tamanho basta colocar :
    grid-template-columns: 1fr 1fr 1fr;

    * grid-template-rows: a ideia é a mesma, quantas linhas e qual tamanho.
    se nós colocarmos uma altura e linha de 300px, ele continua com duas
    linhas, o que resulta na quebra automatica de linhas caso os elementos
    não caibam nas colunas

    O grid container se comporta de forma a deixar todos os elementos
    em sequência, pois é natural para ele, já que vai preencher todas
    as colunas com os elementos disponíveis para ele.

    como queremos que as visualizações e os minutos fiquem em duas colunas 
    separadas e todo restante em uma única linha, podemos mescla-las através
    do grid-columns, que possui o valor "span X", onde X é o número de
    células.

    gap: propriedade na qual é aplicada em layouts muito consistentes.
    no nosso código, o espaçamento entre os elementos vão ser entre 8 pixels
    ou 16 pixels, e 16 costuma mais para o espaçamento interno, porém, cada
    elemento possui uma exata distancia de 8 pixels.

    através da propriedade gap, podemos colocar gap: 8px, e tudo vai ter 
    exatamente o espaço de 8px.

    Detalhe importante: o comportamento dele é bem parececido com o
    justify-content, com o valor space-between, no sentido de que os elementos
    que estão na bordas, próximos as paredes, não vão ter espaçamento no lado
    em que está encostado nessa parede do grid container.

    o row-gap, vai ter apenas os espaçamentos entre linhas e não colunas
    column-gap: espaçamento entre colunas.

    com tudo realizado até o momento, precisamos arrumar a incerteza de tempo
    que é presente no elemento que possui o tempo de 33 minutos, para que
    ele não saia de sua caixa já determinada no grid. então, onde estava
    grid-template-columns: 1fr 1fr, arrumamos para auto. 

    então ficará grid-template-columns: auto 1fr,  os elementos se tornam
    próximos sem alterar nenhuma disposição presente

    graças a ferramenta de grid e flex, não há mais problemas de compatibilidade
    de navegadores, sendo altamente recomendado o uso de grid, com exceção de
    casos onde o flex já pode resolver, trabalhando com elementos em uma única linha

    Mas caso você não precise de elementos ocupando uma linha só, o grid é maravilhoso, 
    exatamente porque já faz o processo automático de deixar um elemento embaixo do outro, 
    o que já é natural do próprio HTML.

    grid-row: 1 / span 2; significa que começa na primeira coluna, 1, e ele tem um span de duas colunas, / span 2;

    organizando toda a página temos um seguinte problema::

    * Em meio a tantos elementos, como organizar isto tudo?

    Além da clássica organização de classes, sendo pai, filho, @media e afins, temos
    muito texto e coisas demais para ler e entender de forma calma...

    a forma mais ideal, é que em cada elemento do grid container que queremos
    organizar, devemos usar a propriedade "grid-areas"

    o "grid-areas" é uma propriedade que é escrita como "grid-template-areas:",
    sendo assim, podemos definir áreas para cada parte do website, sendo ela
    o cabeçalho, corpo, barra lateral e afins.

    a importância dessa propriedade se da no fato de que podemos separar as áreas
    do nosso site

    por exemplo: grid-template-areas:"titulo-pagina titulo-pagina titulo-pagina"

    dizemos que na primeira linha, 3 colunas são ocupadas pelo título da página

    quando vamos em outro elemento, por exemplo o inicio, podemos escrever assim:
    grid-area: titulo-pagina; assim, ocupando as 3 colunas no topo da primeira linha

    grid-template-areas:"titulo-pagina titulo-pagina titulo-pagina" "destaque destaque recentes".

    quando escrevemos desta forma, temos os 3 espaços do título, e depois de um espaço seguido
    por aspas duplas, e agora, dentro dessa segunda linha, o que está ocupando as colunas? 
    Nós temos o “destaque destaque, lembrando que são três colunas, e o cartão de destaque que 
    vai ocupar as duas colunas, e recentes”;, que vai ser o “Vídeos recentes” ali do lado.

    Agora eu vou no cartão de destaque e falo, seu nome agora no grid-area: é destaque;. 
    E para você, cartão recentes, você agora vai se chamar recentes, grid-area: recentes;.



*/

@font-face {
    font-family: 'icones';
    src: url(/assets/font/icones.ttf);
}

body {
    background-color: #1D232A;
    font-family: 'Open sans', 'icones', sans-serif;
    color: #FFFFFF;
}

@media screen and (min-width: 1440px) {
    body {
        display: grid;
        grid-template-columns: auto 1fr;
    }
}

.cabecalho {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #15191C;
    padding: 8px 16px;
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.16);
}

.cabecalho__menu i::before {
    content: "\e904";
    font-size: 24px;
}

.cabecalho__notificacao i::before {
    content: "\e906";
    font-size: 24px;
}

.cabecalho__logo {
    width: 40px;
}

.cabecalho__perfil {
    display: none;
}

@media screen and (min-width: 1440px) {
    .cabecalho {
        background-color: #1D232A;
        display: grid;
        column-gap: 32px;
        grid-template-columns: 1fr auto;
        padding: 16px 60px;
        height: 80px;
        box-sizing: border-box;
        grid-column: 2;
    }

    .cabecalho__menu {
        display: none;
    }

    .cabecalho__logo {
        display: none;
    }

    .cabecalho__perfil {
        display: grid;
        grid-template-columns: repeat(3, auto);
        column-gap: 8px;
        align-items: center;
        justify-self: flex-end;
        color: #95999C;
        padding: 8px 32px;
        border-right: 1px solid #95999C;
    }

    .cabecalho__perfil::before {
        content: "";
        display: block;
        width: 32px;
        height: 32px;
        background-image: url(/assets/img/profile_2.png);
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .cabecalho__perfil::after {
        content: "\e90d";
        color: #FFFFFF;
        font-size: 1.5rem;
    }
}

.menu-lateral {
    display: flex;
    flex-direction: column;
    background-color: #15191C;
    width: 75vw;
    height: 100vh;

    transition: .80s;
    position: absolute;
    left: -100vw;
}

.menu-lateral--ativo {
    left: 0;
    transition: .75s;
}

.menu-lateral__logo {
    width: 118px;
    align-self: center;
    padding: 16px;
}

.menu-lateral__link {
    height: 64px;
    color: #95999C;
    padding-left: 64px;
    display: flex;
    align-items: center;
}

.menu-lateral__link--ativo {
    color: #FFFFFF;
    padding-left: 56px;
    border-left: 8px solid #FFFFFF;
}

.menu-lateral__link::before {
    content: "";
    width: 24px;
    height: 24px;
    font-size: 24px;
    position: absolute;
    left: 24px;
}

.menu-lateral__link--inicio::before {
    content: "\e902";
}

.menu-lateral__link--videos::before {
    content: "\e90e";
}

.menu-lateral__link--picos::before {
    content: "\e909";
}

.menu-lateral__link--integrantes::before {
    content: "\e903";
}

.menu-lateral__link--camisas::before {
    content: "\e900";
}

.menu-lateral__link--pinturas::before {
    content: "\e90a";
}

@media screen and (min-width: 1440px) {
    .menu-lateral {
        position: static;
        width: 200px;
        grid-column: 1;
        grid-row: 1 / span 2;
    }
}

.principal {
    padding: 24px 16px;
    display: grid;
    gap: 16px;
}

.titulo-pagina {
    font-size: 1.5rem;
    font-weight: 700;
}

.titulo-secao {
    font-size: 1.2rem;
    font-weight: 700;
}

@media screen and (min-width: 1440px) {
    .principal {
        display: grid;
        grid-template-columns: auto 1fr auto;
        grid-template-areas:

            "titulo-pagina titulo-pagina titulo-pagina"
            "destaque-video destaque-video videos-recentes"
            "secao-videos secao-videos secao-videos"
            "produtos-recentes destaque-produtos destaque-produtos"
            "secao-produtos secao-produtos secao-produtos"
        ;
        column-gap: 32px;
        padding: 16px 60px;
        grid-column: 2;
    }

    .titulo-secao {
        grid-column: span 4;
    }
}

.cartao {
    width: 100%;
    border-radius: 15px;
    overflow: hidden;
    background-color: #2C343A;
}

.cartao__imagem--desktop {
    display: none;
}

.cartao--destaque {
    margin-bottom: 16px;
}

.cartao__conteudo {
    padding: 16px;
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 8px;
}

.cartao__destaque {
    grid-column: span 2;
}

.cartao__titulo {
    font-size: 1.2rem;
    font-weight: 700;
    grid-column: span 2;
}

.cartao__perfil {
    color: #95999C;
    font-size: 0.9rem;
    grid-column: span 2;
}

.cartao__info {
    display: flex;
    align-items: center;
    color: #95999C;
}

.cartao__info--tempo::before {
    content: "\e90c";
    margin-right: 8px;
}

.cartao__info--visualizacao::before {
    content: "\e90f";
    margin-right: 8px;
}

.cartao__botao {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #0480DC;
    width: 40px;
    height: 40px;
    border-radius: 10px;
    font-size: 0.9rem;
    justify-self: flex-end;
}

.cartao__botao--play::before {
    content: "\e90b";
    font-size: 24px;
}

.cartao__botao--destaque {
    width: 100%;
    grid-column: span 2;
}

.cartao__botao--destaque::before {
    margin-right: 8px;
}

.cartao--recentes {
    display: none;
}

@media screen and (min-width:1440px) {

    .cartao--destaque {
        margin-bottom: 0;
    }

    .cartao__imagem--mobile {
        display: none;
    }

    .cartao__imagem--desktop {
        display: block;
    }

    .cartao__botao--destaque {
        grid-column: auto;
        padding: 16px 8px;
    }

    .cartao--recentes {
        display: grid;
        grid-template-columns: auto auto;
        align-items: center;
        row-gap: 24px;
        width: 256px;
        padding: 16px;
        box-sizing: border-box;
        align-self: flex-start;
    }

    .cartao--recentes .cartao__titulo {
        grid-column: auto;
    }

    .cartao__link {
        font-size: 0.8rem;
        font-weight: 600;
        color: #0480DC;
        justify-self: flex-end;
    }

    .cartao__lista {
        display: grid;
        row-gap: 16px;
        grid-column: span 2;
    }

    .cartao__item {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 8px;
    }

    .cartao__item--thumbnail {
        width: 32px;
        grid-row: span 2;
    }

    .cartao__item-titulo {
        font-size: 0.9rem;
        line-height: 1.2rem;
        font-weight: 700;
    }

    .cartao__item--perfil {
        font-size: 0.8rem;
        color: #95999C;
    }
}

.secao {
    display: grid;
    gap: 16px;
}

@media screen and (min-width: 1440px) {
    .secao {
        grid-template-columns: repeat(4, 1fr);
    }

    .destaque-video {
        grid-area: destaque-video;
    }

    .videos-recentes {
        grid-area: videos-recentes;
    }

    .secao-videos {
        grid-area: secao-videos;
    }

    .destaque-produtos {
        grid-area: destaque-produtos;
    }

    .produtos-recentes {
        grid-area: produtos-recentes;
    }

    .secao-produtos {
        grid-area: secao-produtos;
    }
}